/** \file
 *  Game Develop
 *  2008-2013 Florian Rival (Florian.Rival@gmail.com)
 */
#ifndef OBJECTSPROPGRIDHELPER_H
#define OBJECTSPROPGRIDHELPER_H

#include <wx/propgrid/propgrid.h>
#include <vector>
#include <wx/propgrid/propgrid.h>
namespace gd { class MainFrameWrapper; }
namespace gd { class Object; }
namespace gd { class Project; }
namespace gd { class Layout; }

namespace gd
{

/**
 * \brief Helper class used to easily use a wxPropertyGrid so as to view and edit the properties of
 * a gd::Object.
 *
 * \see gd::Object
 *
 * \ingroup IDEdialogs
 */
class GD_CORE_API ObjectsPropgridHelper
{
public:

    /**
     * \brief Default constructor.
     * \param project The project edited
     * \param layout The layout being edited
     */
    ObjectsPropgridHelper(gd::Project & project_, gd::MainFrameWrapper & mainFrameWrapper_) : grid(NULL), project(project_), mainFrameWrapper(mainFrameWrapper_) {};
    virtual ~ObjectsPropgridHelper() {};

    /**
     * \brief Refresh the property grid from an object
     * \param object The object to be displayed.
     */
    void RefreshFrom(const gd::Object * object);

    /**
     * \brief Call this when the event wxEVT_PG_SELECTED of wxPropertyGrid is triggered.
     * \param object The object displayed
     * \param layout The layout the object belongs to. Can be NULL for a global object.
     * \param event The event generated by wxWidgets.
     * \return true if the grid must be updated
     */
    bool OnPropertySelected(gd::Object * object, gd::Layout * layout, wxPropertyGridEvent& event);

    /**
     * \brief Call this when the event wxEVT_PG_CHANGED of wxPropertyGrid is triggered.
     * \param object The object displayed
     * \param layout The layout the object belongs to. Can be NULL for a global object.
     * \param event The event generated by wxWidgets.
     * \return true if the grid must be updated
     */
    bool OnPropertyChanged(gd::Object * object, gd::Layout * layout, wxPropertyGridEvent& event);

    /**
     * \brief Set the grid being used.
     */
    void SetGrid(wxPropertyGrid * grid_) { grid = grid_; }

private:
    wxPropertyGrid * grid; ///< The grid used for diplaying and editing properties.
    gd::Project & project;
    gd::MainFrameWrapper & mainFrameWrapper;
};

}

#endif // OBJECTSPROPGRIDHELPER_H
