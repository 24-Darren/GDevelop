/**
 * Launch this script to re-generate the files containing the list of extensions
 * being used by each example.
 */
const gd = require('../public/libGD.js')();
const makeExtensionsLoader = require('./lib/LocalJsExtensionsLoader');
const { enumerateInstructions } = require('./lib/EnumerateInstructions');
const { enumerateExpressions } = require('./lib/EnumerateExpressions');
const fs = require('fs');
var shell = require('shelljs');

shell.exec('node import-GDJS-Runtime.js');
gd.initializePlatforms(); //TODO: Useless or not?

const outputFile = './test.json';

const writeFile = object => {
  return new Promise((resolve, reject) => {
    const content = [
      `// This file is generated by update-examples-extensions-usage-from-resources-examples.js script`,
      `// prettier-ignore`,
      `module.exports = ${JSON.stringify(object, null, 2)};`,
      ``,
    ].join('\n');
    fs.writeFile(outputFile, content, err => {
      if (err) return reject(err);

      resolve();
    });
  });
};

const noopTranslationFunction = str => str;
const extensionsLoader = makeExtensionsLoader({ gd, filterExamples: true });
extensionsLoader
  .loadAllExtensions(noopTranslationFunction)
  .then(loadingResults => {
    console.info('Loaded extensions', loadingResults);
  })
  .then(() => {
    const allActions = enumerateInstructions(gd, false);
    const allConditions = enumerateInstructions(gd, true);
    const allStringExpressions = enumerateExpressions(gd, 'string');
    const allNumberExpressions = enumerateExpressions(gd, 'number');

    return {
      allActions,
      allConditions,
      allStringExpressions,
      allNumberExpressions,
    };
  })
  .then(allMetadata => {
    return writeFile(allMetadata);
  })
  .then(
    () => console.info('Done.'),
    err => console.error('Error while writing output', err)
  );
