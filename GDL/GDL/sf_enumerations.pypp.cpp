#ifdef PYSUPPORT
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "c:/libs/sfml/include/sfml/system.hpp"
#include "c:/libs/sfml/include/sfml/window.hpp"
#include "c:/libs/sfml/include/sfml/window/contextsettings.hpp"
#include "c:/libs/sfml/include/sfml/graphics.hpp"
#include "c:/libs/sfml/include/sfml/audio.hpp"
#include "sf_enumerations.pypp.hpp"

namespace bp = boost::python;
/*
void register_enumerations(){

    bp::enum_< sf::Joy::Axis>("Axis")
        .value("AxisX", sf::Joy::AxisX)
        .value("AxisY", sf::Joy::AxisY)
        .value("AxisZ", sf::Joy::AxisZ)
        .value("AxisR", sf::Joy::AxisR)
        .value("AxisU", sf::Joy::AxisU)
        .value("AxisV", sf::Joy::AxisV)
        .value("AxisPOV", sf::Joy::AxisPOV)
        .value("Count", sf::Joy::Count)
        .export_values()
        ;

    bp::enum_< sf::Mouse::Button>("Button")
        .value("Left", sf::Mouse::Left)
        .value("Right", sf::Mouse::Right)
        .value("Middle", sf::Mouse::Middle)
        .value("XButton1", sf::Mouse::XButton1)
        .value("XButton2", sf::Mouse::XButton2)
        .value("Count", sf::Mouse::Count)
        .export_values()
        ;

    bp::enum_< sf::Key::Code>("Code")
        .value("A", sf::Key::A)
        .value("B", sf::Key::B)
        .value("C", sf::Key::C)
        .value("D", sf::Key::D)
        .value("E", sf::Key::E)
        .value("F", sf::Key::F)
        .value("G", sf::Key::G)
        .value("H", sf::Key::H)
        .value("I", sf::Key::I)
        .value("J", sf::Key::J)
        .value("K", sf::Key::K)
        .value("L", sf::Key::L)
        .value("M", sf::Key::M)
        .value("N", sf::Key::N)
        .value("O", sf::Key::O)
        .value("P", sf::Key::P)
        .value("Q", sf::Key::Q)
        .value("R", sf::Key::R)
        .value("S", sf::Key::S)
        .value("T", sf::Key::T)
        .value("U", sf::Key::U)
        .value("V", sf::Key::V)
        .value("W", sf::Key::W)
        .value("X", sf::Key::X)
        .value("Y", sf::Key::Y)
        .value("Z", sf::Key::Z)
        .value("Num0", sf::Key::Num0)
        .value("Num1", sf::Key::Num1)
        .value("Num2", sf::Key::Num2)
        .value("Num3", sf::Key::Num3)
        .value("Num4", sf::Key::Num4)
        .value("Num5", sf::Key::Num5)
        .value("Num6", sf::Key::Num6)
        .value("Num7", sf::Key::Num7)
        .value("Num8", sf::Key::Num8)
        .value("Num9", sf::Key::Num9)
        .value("Escape", sf::Key::Escape)
        .value("LControl", sf::Key::LControl)
        .value("LShift", sf::Key::LShift)
        .value("LAlt", sf::Key::LAlt)
        .value("LSystem", sf::Key::LSystem)
        .value("RControl", sf::Key::RControl)
        .value("RShift", sf::Key::RShift)
        .value("RAlt", sf::Key::RAlt)
        .value("RSystem", sf::Key::RSystem)
        .value("Menu", sf::Key::Menu)
        .value("LBracket", sf::Key::LBracket)
        .value("RBracket", sf::Key::RBracket)
        .value("SemiColon", sf::Key::SemiColon)
        .value("Comma", sf::Key::Comma)
        .value("Period", sf::Key::Period)
        .value("Quote", sf::Key::Quote)
        .value("Slash", sf::Key::Slash)
        .value("BackSlash", sf::Key::BackSlash)
        .value("Tilde", sf::Key::Tilde)
        .value("Equal", sf::Key::Equal)
        .value("Dash", sf::Key::Dash)
        .value("Space", sf::Key::Space)
        .value("Return", sf::Key::Return)
        .value("Back", sf::Key::Back)
        .value("Tab", sf::Key::Tab)
        .value("PageUp", sf::Key::PageUp)
        .value("PageDown", sf::Key::PageDown)
        .value("End", sf::Key::End)
        .value("Home", sf::Key::Home)
        .value("Insert", sf::Key::Insert)
        .value("Delete", sf::Key::Delete)
        .value("Add", sf::Key::Add)
        .value("Subtract", sf::Key::Subtract)
        .value("Multiply", sf::Key::Multiply)
        .value("Divide", sf::Key::Divide)
        .value("Left", sf::Key::Left)
        .value("Right", sf::Key::Right)
        .value("Up", sf::Key::Up)
        .value("Down", sf::Key::Down)
        .value("Numpad0", sf::Key::Numpad0)
        .value("Numpad1", sf::Key::Numpad1)
        .value("Numpad2", sf::Key::Numpad2)
        .value("Numpad3", sf::Key::Numpad3)
        .value("Numpad4", sf::Key::Numpad4)
        .value("Numpad5", sf::Key::Numpad5)
        .value("Numpad6", sf::Key::Numpad6)
        .value("Numpad7", sf::Key::Numpad7)
        .value("Numpad8", sf::Key::Numpad8)
        .value("Numpad9", sf::Key::Numpad9)
        .value("F1", sf::Key::F1)
        .value("F2", sf::Key::F2)
        .value("F3", sf::Key::F3)
        .value("F4", sf::Key::F4)
        .value("F5", sf::Key::F5)
        .value("F6", sf::Key::F6)
        .value("F7", sf::Key::F7)
        .value("F8", sf::Key::F8)
        .value("F9", sf::Key::F9)
        .value("F10", sf::Key::F10)
        .value("F11", sf::Key::F11)
        .value("F12", sf::Key::F12)
        .value("F13", sf::Key::F13)
        .value("F14", sf::Key::F14)
        .value("F15", sf::Key::F15)
        .value("Pause", sf::Key::Pause)
        .value("Count", sf::Key::Count)
        .export_values()
        ;

    bp::enum_< sf::Blend::Mode>("Mode")
        .value("Alpha", sf::Blend::Alpha)
        .value("Add", sf::Blend::Add)
        .value("Multiply", sf::Blend::Multiply)
        .value("None", sf::Blend::None)
        .export_values()
        ;

}*/
#endif
