#ifdef PYSUPPORT
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "c:/libs/sfml/include/sfml/system.hpp"
#include "c:/libs/sfml/include/sfml/window.hpp"
#include "c:/libs/sfml/include/sfml/window/contextsettings.hpp"
#include "c:/libs/sfml/include/sfml/graphics.hpp"
#include "c:/libs/sfml/include/sfml/audio.hpp"
#include "sf_classes_3.pypp.hpp"

namespace bp = boost::python;

struct WindowListener_wrapper : sf::WindowListener, bp::wrapper< sf::WindowListener > {

    WindowListener_wrapper()
    : sf::WindowListener()
      , bp::wrapper< sf::WindowListener >(){
        // null constructor

    }

    virtual void OnEvent( ::sf::Event const & event ){
        bp::override func_OnEvent = this->get_override( "OnEvent" );
        func_OnEvent( boost::ref(event) );
    }

};

void register_classes_3(){
/*
    bp::class_< sf::Rect< int > >( "IntRect", bp::init< >() )
        .def( bp::init< int, int, int, int >(( bp::arg("left"), bp::arg("top"), bp::arg("right"), bp::arg("bottom") )) )
        .def(
            "Contains"
            , (bool ( ::sf::Rect<int>::* )( int,int ) const)( &::sf::Rect< int >::Contains )
            , ( bp::arg("x"), bp::arg("y") ) )
        .def(
            "Contains"
            , (bool ( ::sf::Rect<int>::* )( ::sf::Vector2< int > const & ) const)( &::sf::Rect< int >::Contains )
            , ( bp::arg("point") ) )
        .def(
            "GetCenter"
            , (::sf::Vector2< int > ( ::sf::Rect<int>::* )(  ) const)( &::sf::Rect< int >::GetCenter ) )
        .def(
            "GetSize"
            , (::sf::Vector2< int > ( ::sf::Rect<int>::* )(  ) const)( &::sf::Rect< int >::GetSize ) )
        .def(
            "Intersects"
            , (bool ( ::sf::Rect<int>::* )( ::sf::Rect< int > const & ) const)( &::sf::Rect< int >::Intersects )
            , ( bp::arg("rectangle") ) )
        .def(
            "Intersects"
            , (bool ( ::sf::Rect<int>::* )( ::sf::Rect< int > const &,::sf::Rect< int > & ) const)( &::sf::Rect< int >::Intersects )
            , ( bp::arg("rectangle"), bp::arg("intersection") ) )
        .def(
            "Offset"
            , (void ( ::sf::Rect<int>::* )( int,int ) )( &::sf::Rect< int >::Offset )
            , ( bp::arg("offsetX"), bp::arg("offsetY") ) )
        .def(
            "Offset"
            , (void ( ::sf::Rect<int>::* )( ::sf::Vector2< int > const & ) )( &::sf::Rect< int >::Offset )
            , ( bp::arg("offset") ) )
        .def_readwrite( "Bottom", &sf::Rect< int >::Bottom )
        .def_readwrite( "Left", &sf::Rect< int >::Left )
        .def_readwrite( "Right", &sf::Rect< int >::Right )
        .def_readwrite( "Top", &sf::Rect< int >::Top );

    bp::class_< sf::Resource< sf::Image >, boost::noncopyable >( "Resource_less__sf_scope_Image__greater_", bp::no_init );

    { //::sf::Image
        typedef bp::class_< sf::Image, bp::bases< sf::Resource< sf::Image > > > Image_exposer_t;
        Image_exposer_t Image_exposer = Image_exposer_t( "Image", bp::init< >() );
        bp::scope Image_scope( Image_exposer );
        Image_exposer.def( bp::init< sf::Image const & >(( bp::arg("copy") )) );
        Image_exposer.def( bp::init< unsigned int, unsigned int, bp::optional< sf::Color const & > >(( bp::arg("width"), bp::arg("height"), bp::arg("color")=sf::Color(0, 0, 0, 255) )) );
        Image_exposer.def( bp::init< unsigned int, unsigned int, sf::Uint8 const * >(( bp::arg("width"), bp::arg("height"), bp::arg("pixels") )) );
        { //::sf::Image::Bind

            typedef void ( ::sf::Image::*Bind_function_type )(  ) const;

            Image_exposer.def(
                "Bind"
                , Bind_function_type( &::sf::Image::Bind ) );

        }
        { //::sf::Image::Copy

            typedef void ( ::sf::Image::*Copy_function_type )( ::sf::Image const &,unsigned int,unsigned int,::sf::IntRect const &,bool ) ;

            Image_exposer.def(
                "Copy"
                , Copy_function_type( &::sf::Image::Copy )
                , ( bp::arg("source"), bp::arg("destX"), bp::arg("destY"), bp::arg("sourceRect")=sf::Rect<int>(0, 0, 0, 0), bp::arg("applyAlpha")=(bool)(false) ) );

        }
        { //::sf::Image::CopyScreen

            typedef bool ( ::sf::Image::*CopyScreen_function_type )( ::sf::RenderWindow &,::sf::IntRect const & ) ;

            Image_exposer.def(
                "CopyScreen"
                , CopyScreen_function_type( &::sf::Image::CopyScreen )
                , ( bp::arg("window"), bp::arg("sourceRect")=sf::Rect<int>(0, 0, 0, 0) ) );

        }
        { //::sf::Image::Create

            typedef bool ( ::sf::Image::*Create_function_type )( unsigned int,unsigned int,::sf::Color const & ) ;

            Image_exposer.def(
                "Create"
                , Create_function_type( &::sf::Image::Create )
                , ( bp::arg("width"), bp::arg("height"), bp::arg("color")=sf::Color(0, 0, 0, 255) ) );

        }
        { //::sf::Image::CreateMaskFromColor

            typedef void ( ::sf::Image::*CreateMaskFromColor_function_type )( ::sf::Color const &,::sf::Uint8 ) ;

            Image_exposer.def(
                "CreateMaskFromColor"
                , CreateMaskFromColor_function_type( &::sf::Image::CreateMaskFromColor )
                , ( bp::arg("transparentColor"), bp::arg("alpha")=(unsigned char)(0) ) );

        }
        { //::sf::Image::GetHeight

            typedef unsigned int ( ::sf::Image::*GetHeight_function_type )(  ) const;

            Image_exposer.def(
                "GetHeight"
                , GetHeight_function_type( &::sf::Image::GetHeight ) );

        }
        { //::sf::Image::GetPixel

            typedef ::sf::Color const & ( ::sf::Image::*GetPixel_function_type )( unsigned int,unsigned int ) const;

            Image_exposer.def(
                "GetPixel"
                , GetPixel_function_type( &::sf::Image::GetPixel )
                , ( bp::arg("x"), bp::arg("y") )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        /*{ //::sf::Image::GetPixelsPtr

            typedef ::sf::Uint8 const * ( ::sf::Image::*GetPixelsPtr_function_type )(  ) const;

            Image_exposer.def(
                "GetPixelsPtr"
                , GetPixelsPtr_function_type( &::sf::Image::GetPixelsPtr )
                , bp::return_internal_reference< >() );

        }
        { //::sf::Image::GetTexCoords

            typedef ::sf::FloatRect ( ::sf::Image::*GetTexCoords_function_type )( ::sf::IntRect const & ) const;

            Image_exposer.def(
                "GetTexCoords"
                , GetTexCoords_function_type( &::sf::Image::GetTexCoords )
                , ( bp::arg("rectangle") ) );

        }
        { //::sf::Image::GetValidTextureSize

            typedef unsigned int ( *GetValidTextureSize_function_type )( unsigned int );

            Image_exposer.def(
                "GetValidTextureSize"
                , GetValidTextureSize_function_type( &::sf::Image::GetValidTextureSize )
                , ( bp::arg("size") ) );

        }
        { //::sf::Image::GetWidth

            typedef unsigned int ( ::sf::Image::*GetWidth_function_type )(  ) const;

            Image_exposer.def(
                "GetWidth"
                , GetWidth_function_type( &::sf::Image::GetWidth ) );

        }
        { //::sf::Image::IsSmooth

            typedef bool ( ::sf::Image::*IsSmooth_function_type )(  ) const;

            Image_exposer.def(
                "IsSmooth"
                , IsSmooth_function_type( &::sf::Image::IsSmooth ) );

        }
        { //::sf::Image::LoadFromFile

            typedef bool ( ::sf::Image::*LoadFromFile_function_type )( ::std::string const & ) ;

            Image_exposer.def(
                "LoadFromFile"
                , LoadFromFile_function_type( &::sf::Image::LoadFromFile )
                , ( bp::arg("filename") ) );

        }
        { //::sf::Image::LoadFromMemory

            typedef bool ( ::sf::Image::*LoadFromMemory_function_type )( char const *,::size_t ) ;

            Image_exposer.def(
                "LoadFromMemory"
                , LoadFromMemory_function_type( &::sf::Image::LoadFromMemory )
                , ( bp::arg("data"), bp::arg("sizeInBytes") ) );

        }
        { //::sf::Image::LoadFromPixels

            typedef bool ( ::sf::Image::*LoadFromPixels_function_type )( unsigned int,unsigned int,::sf::Uint8 const * ) ;

            Image_exposer.def(
                "LoadFromPixels"
                , LoadFromPixels_function_type( &::sf::Image::LoadFromPixels )
                , ( bp::arg("width"), bp::arg("height"), bp::arg("pixels") ) );

        }
        { //::sf::Image::SaveToFile

            typedef bool ( ::sf::Image::*SaveToFile_function_type )( ::std::string const & ) const;

            Image_exposer.def(
                "SaveToFile"
                , SaveToFile_function_type( &::sf::Image::SaveToFile )
                , ( bp::arg("filename") ) );

        }
        { //::sf::Image::SetPixel

            typedef void ( ::sf::Image::*SetPixel_function_type )( unsigned int,unsigned int,::sf::Color const & ) ;

            Image_exposer.def(
                "SetPixel"
                , SetPixel_function_type( &::sf::Image::SetPixel )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("color") ) );

        }
        { //::sf::Image::SetSmooth

            typedef void ( ::sf::Image::*SetSmooth_function_type )( bool ) ;

            Image_exposer.def(
                "SetSmooth"
                , SetSmooth_function_type( &::sf::Image::SetSmooth )
                , ( bp::arg("smooth") ) );

        }
        { //::sf::Image::operator=

            typedef ::sf::Image & ( ::sf::Image::*assign_function_type )( ::sf::Image const & ) ;

            Image_exposer.def(
                "assign"
                , assign_function_type( &::sf::Image::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );

        }
        Image_exposer.staticmethod( "GetValidTextureSize" );
    }

    bp::class_< WindowListener_wrapper, boost::noncopyable >( "WindowListener", bp::no_init )
        .def(
            "OnEvent"
            , bp::pure_virtual( (void ( ::sf::WindowListener::* )( ::sf::Event const & ) )(&::sf::WindowListener::OnEvent) )
            , ( bp::arg("event") ) );

    bp::class_< sf::Input, bp::bases< sf::WindowListener >, boost::noncopyable >( "Input", bp::init< >() )
        .def(
            "GetJoystickAxis"
            , (float ( ::sf::Input::* )( unsigned int,::sf::Joy::Axis ) const)( &::sf::Input::GetJoystickAxis )
            , ( bp::arg("joystick"), bp::arg("axis") ) )
        .def(
            "GetMouseX"
            , (int ( ::sf::Input::* )(  ) const)( &::sf::Input::GetMouseX ) )
        .def(
            "GetMouseY"
            , (int ( ::sf::Input::* )(  ) const)( &::sf::Input::GetMouseY ) )
        .def(
            "IsJoystickButtonDown"
            , (bool ( ::sf::Input::* )( unsigned int,unsigned int ) const)( &::sf::Input::IsJoystickButtonDown )
            , ( bp::arg("joystick"), bp::arg("button") ) )
        .def(
            "IsKeyDown"
            , (bool ( ::sf::Input::* )( ::sf::Key::Code ) const)( &::sf::Input::IsKeyDown )
            , ( bp::arg("key") ) )
        .def(
            "IsMouseButtonDown"
            , (bool ( ::sf::Input::* )( ::sf::Mouse::Button ) const)( &::sf::Input::IsMouseButtonDown )
            , ( bp::arg("button") ) );

    bp::class_< sf::Listener >( "Listener" )
        .def(
            "GetDirection"
            , (::sf::Vector3f (*)(  ))( &::sf::Listener::GetDirection ) )
        .def(
            "GetGlobalVolume"
            , (float (*)(  ))( &::sf::Listener::GetGlobalVolume ) )
        .def(
            "GetPosition"
            , (::sf::Vector3f (*)(  ))( &::sf::Listener::GetPosition ) )
        .def(
            "SetDirection"
            , (void (*)( float,float,float ))( &::sf::Listener::SetDirection )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) )
        .def(
            "SetDirection"
            , (void (*)( ::sf::Vector3f const & ))( &::sf::Listener::SetDirection )
            , ( bp::arg("direction") ) )
        .def(
            "SetGlobalVolume"
            , (void (*)( float ))( &::sf::Listener::SetGlobalVolume )
            , ( bp::arg("volume") ) )
        .def(
            "SetPosition"
            , (void (*)( float,float,float ))( &::sf::Listener::SetPosition )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("z") ) )
        .def(
            "SetPosition"
            , (void (*)( ::sf::Vector3f const & ))( &::sf::Listener::SetPosition )
            , ( bp::arg("position") ) )
        .staticmethod( "GetDirection" )
        .staticmethod( "GetGlobalVolume" )
        .staticmethod( "GetPosition" )
        .staticmethod( "SetDirection" )
        .staticmethod( "SetGlobalVolume" )
        .staticmethod( "SetPosition" );
*/
}
#endif
