#ifdef PYSUPPORT
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "c:/libs/sfml/include/sfml/system.hpp"
#include "c:/libs/sfml/include/sfml/window.hpp"
#include "c:/libs/sfml/include/sfml/window/contextsettings.hpp"
#include "c:/libs/sfml/include/sfml/graphics.hpp"
#include "c:/libs/sfml/include/sfml/audio.hpp"
#include "sf_classes_7.pypp.hpp"

namespace bp = boost::python;

void register_classes_7(){

    bp::class_< sf::SoundBufferRecorder, bp::bases< sf::SoundRecorder >, boost::noncopyable >( "SoundBufferRecorder" )
        .def(
            "GetBuffer"
            , (::sf::SoundBuffer const & ( ::sf::SoundBufferRecorder::* )(  ) const)( &::sf::SoundBufferRecorder::GetBuffer )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< sf::Sprite, bp::bases< sf::Drawable > >( "Sprite", bp::init< >() )
        .def( bp::init< sf::Image const &, bp::optional< sf::Vector2f const &, sf::Vector2f const &, float, sf::Color const & > >(( bp::arg("image"), bp::arg("position")=sf::Vector2<float>(0.0f, 0.0f), bp::arg("scale")=sf::Vector2<float>(1.0e+0f, 1.0e+0f), bp::arg("rotation")=0.0f, bp::arg("color")=sf::Color(255, 255, 255, 255) )) )
        .def(
            "FlipX"
            , (void ( ::sf::Sprite::* )( bool ) )( &::sf::Sprite::FlipX )
            , ( bp::arg("flipped") ) )
        .def(
            "FlipY"
            , (void ( ::sf::Sprite::* )( bool ) )( &::sf::Sprite::FlipY )
            , ( bp::arg("flipped") ) )
        .def(
            "GetImage"
            , (::sf::Image const * ( ::sf::Sprite::* )(  ) const)( &::sf::Sprite::GetImage )
            , bp::return_internal_reference< >() )
        .def(
            "GetPixel"
            , (::sf::Color ( ::sf::Sprite::* )( unsigned int,unsigned int ) const)( &::sf::Sprite::GetPixel )
            , ( bp::arg("x"), bp::arg("y") ) )
        .def(
            "GetSize"
            , (::sf::Vector2f ( ::sf::Sprite::* )(  ) const)( &::sf::Sprite::GetSize ) )
        .def(
            "GetSubRect"
            , (::sf::IntRect const & ( ::sf::Sprite::* )(  ) const)( &::sf::Sprite::GetSubRect )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "Resize"
            , (void ( ::sf::Sprite::* )( float,float ) )( &::sf::Sprite::Resize )
            , ( bp::arg("width"), bp::arg("height") ) )
        .def(
            "Resize"
            , (void ( ::sf::Sprite::* )( ::sf::Vector2f const & ) )( &::sf::Sprite::Resize )
            , ( bp::arg("size") ) )
        .def(
            "SetImage"
            , (void ( ::sf::Sprite::* )( ::sf::Image const & ) )( &::sf::Sprite::SetImage )
            , ( bp::arg("image") ) )
        .def(
            "SetSubRect"
            , (void ( ::sf::Sprite::* )( ::sf::IntRect const & ) )( &::sf::Sprite::SetSubRect )
            , ( bp::arg("rectangle") ) );

//sf::String changed to sf::Text
//Commented this block so as to not have to regenerate a binding with Py++ for now.
  /*  { //::sf::Text
        typedef bp::class_< sf::Text, bp::bases< sf::Drawable > > String_exposer_t;
        String_exposer_t String_exposer = String_exposer_t( "Text", bp::init< >() );
        bp::scope String_scope( String_exposer );
        bp::enum_< sf::Text::Style>("Style")
            .value("Regular", sf::Text::Regular)
            .value("Bold", sf::Text::Bold)
            .value("Italic", sf::Text::Italic)
            .value("Underlined", sf::Text::Underlined)
            .export_values()
            ;
        String_exposer.def( bp::init< sf::Unicode::Text const &, bp::optional< sf::Font const &, float > >(( bp::arg("text"), bp::arg("font")=sf::Font::GetDefaultFont(), bp::arg("size")=3.0e+1f )) );
        { //::sf::Text::GetCharacterPos

            typedef ::sf::Vector2f ( ::sf::Text::*GetCharacterPos_function_type )( ::size_t ) const;

            String_exposer.def(
                "GetCharacterPos"
                , GetCharacterPos_function_type( &::sf::Text::GetCharacterPos )
                , ( bp::arg("index") ) );

        }
        { //::sf::Text::GetFont

            typedef ::sf::Font const & ( ::sf::Text::*GetFont_function_type )(  ) const;

            String_exposer.def(
                "GetFont"
                , GetFont_function_type( &::sf::Text::GetFont )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::Text::GetRect

            typedef ::sf::FloatRect ( ::sf::Text::*GetRect_function_type )(  ) const;

            String_exposer.def(
                "GetRect"
                , GetRect_function_type( &::sf::Text::GetRect ) );

        }
        { //::sf::Text::GetSize

            typedef float ( ::sf::Text::*GetSize_function_type )(  ) const;

            String_exposer.def(
                "GetSize"
                , GetSize_function_type( &::sf::Text::GetSize ) );

        }
        { //::sf::Text::GetStyle

            typedef long unsigned int ( ::sf::Text::*GetStyle_function_type )(  ) const;

            String_exposer.def(
                "GetStyle"
                , GetStyle_function_type( &::sf::Text::GetStyle ) );

        }
        { //::sf::Text::GetText

            typedef ::sf::Unicode::Text const & ( ::sf::Text::*GetText_function_type )(  ) const;

            String_exposer.def(
                "GetText"
                , GetText_function_type( &::sf::Text::GetText )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::Text::SetFont

            typedef void ( ::sf::Text::*SetFont_function_type )( ::sf::Font const & ) ;

            String_exposer.def(
                "SetFont"
                , SetFont_function_type( &::sf::Text::SetFont )
                , ( bp::arg("font") ) );

        }
        { //::sf::Text::SetSize

            typedef void ( ::sf::Text::*SetSize_function_type )( float ) ;

            String_exposer.def(
                "SetSize"
                , SetSize_function_type( &::sf::Text::SetSize )
                , ( bp::arg("size") ) );

        }
        { //::sf::Text::SetStyle

            typedef void ( ::sf::Text::*SetStyle_function_type )( long unsigned int ) ;

            String_exposer.def(
                "SetStyle"
                , SetStyle_function_type( &::sf::Text::SetStyle )
                , ( bp::arg("style") ) );

        }
        { //::sf::Text::SetString

            typedef void ( ::sf::Text::*SetString_function_type )( ::sf::Unicode::Text const & ) ;

            String_exposer.def(
                "SetString"
                , SetString_function_type( &::sf::Text::SetString )
                , ( bp::arg("text") ) );

        }
    }*/

    { //::sf::ThreadLocal
        typedef bp::class_< sf::ThreadLocal, boost::noncopyable > ThreadLocal_exposer_t;
        ThreadLocal_exposer_t ThreadLocal_exposer = ThreadLocal_exposer_t( "ThreadLocal", bp::init< bp::optional< void * > >(( bp::arg("value")=bp::object() )) );
        bp::scope ThreadLocal_scope( ThreadLocal_exposer );
        bp::implicitly_convertible< void *, sf::ThreadLocal >();
        { //::sf::ThreadLocal::GetValue

            typedef void * ( ::sf::ThreadLocal::*GetValue_function_type )(  ) const;

            ThreadLocal_exposer.def(
                "GetValue"
                , GetValue_function_type( &::sf::ThreadLocal::GetValue )
                , bp::return_value_policy< bp::return_opaque_pointer >() );

        }
        { //::sf::ThreadLocal::SetValue

            typedef void ( ::sf::ThreadLocal::*SetValue_function_type )( void * ) ;

            ThreadLocal_exposer.def(
                "SetValue"
                , SetValue_function_type( &::sf::ThreadLocal::SetValue )
                , ( bp::arg("value") ) );

        }
    }

    bp::class_< sf::VideoMode >( "VideoMode", bp::init< >() )
        .def( bp::init< unsigned int, unsigned int, bp::optional< unsigned int > >(( bp::arg("width"), bp::arg("height"), bp::arg("bitsPerPixel")=(unsigned int)(32) )) )
        .def(
            "GetDesktopMode"
            , (::sf::VideoMode (*)(  ))( &::sf::VideoMode::GetDesktopMode ) )
        .def(
            "GetMode"
            , (::sf::VideoMode (*)( ::size_t ))( &::sf::VideoMode::GetMode )
            , ( bp::arg("index") ) )
        .def(
            "GetModesCount"
            , (::size_t (*)(  ))( &::sf::VideoMode::GetModesCount ) )
        .def(
            "IsValid"
            , (bool ( ::sf::VideoMode::* )(  ) const)( &::sf::VideoMode::IsValid ) )
        .def( bp::self != bp::self )
        .def( bp::self == bp::self )
        .def_readwrite( "BitsPerPixel", &sf::VideoMode::BitsPerPixel )
        .def_readwrite( "Height", &sf::VideoMode::Height )
        .def_readwrite( "Width", &sf::VideoMode::Width )
        .staticmethod( "GetDesktopMode" )
        .staticmethod( "GetMode" )
        .staticmethod( "GetModesCount" );

    { //::sf::View
        typedef bp::class_< sf::View > View_exposer_t;
        View_exposer_t View_exposer = View_exposer_t( "View", bp::init< >() );
        bp::scope View_scope( View_exposer );
        View_exposer.def( bp::init< sf::FloatRect const & >(( bp::arg("rectangle") )) );
        bp::implicitly_convertible< sf::FloatRect const &, sf::View >();
        View_exposer.def( bp::init< sf::Vector2f const &, sf::Vector2f const & >(( bp::arg("center"), bp::arg("size") )) );
        { //::sf::View::GetCenter

            typedef ::sf::Vector2f const & ( ::sf::View::*GetCenter_function_type )(  ) const;

            View_exposer.def(
                "GetCenter"
                , GetCenter_function_type( &::sf::View::GetCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::View::GetInverseMatrix

            typedef ::sf::Matrix3 const & ( ::sf::View::*GetInverseMatrix_function_type )(  ) const;

            View_exposer.def(
                "GetInverseMatrix"
                , GetInverseMatrix_function_type( &::sf::View::GetInverseMatrix )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::View::GetMatrix

            typedef ::sf::Matrix3 const & ( ::sf::View::*GetMatrix_function_type )(  ) const;

            View_exposer.def(
                "GetMatrix"
                , GetMatrix_function_type( &::sf::View::GetMatrix )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::View::GetRotation

            typedef float ( ::sf::View::*GetRotation_function_type )(  ) const;

            View_exposer.def(
                "GetRotation"
                , GetRotation_function_type( &::sf::View::GetRotation ) );

        }
        { //::sf::View::GetSize

            typedef ::sf::Vector2f const & ( ::sf::View::*GetSize_function_type )(  ) const;

            View_exposer.def(
                "GetSize"
                , GetSize_function_type( &::sf::View::GetSize )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::View::GetViewport

            typedef ::sf::FloatRect const & ( ::sf::View::*GetViewport_function_type )(  ) const;

            View_exposer.def(
                "GetViewport"
                , GetViewport_function_type( &::sf::View::GetViewport )
                , bp::return_value_policy< bp::copy_const_reference >() );

        }
        { //::sf::View::Move

            typedef void ( ::sf::View::*Move_function_type )( float,float ) ;

            View_exposer.def(
                "Move"
                , Move_function_type( &::sf::View::Move )
                , ( bp::arg("offsetX"), bp::arg("offsetY") ) );

        }
        { //::sf::View::Move

            typedef void ( ::sf::View::*Move_function_type )( ::sf::Vector2f const & ) ;

            View_exposer.def(
                "Move"
                , Move_function_type( &::sf::View::Move )
                , ( bp::arg("offset") ) );

        }
        { //::sf::View::Reset

            typedef void ( ::sf::View::*Reset_function_type )( ::sf::FloatRect const & ) ;

            View_exposer.def(
                "Reset"
                , Reset_function_type( &::sf::View::Reset )
                , ( bp::arg("rectangle") ) );

        }
        { //::sf::View::Rotate

            typedef void ( ::sf::View::*Rotate_function_type )( float ) ;

            View_exposer.def(
                "Rotate"
                , Rotate_function_type( &::sf::View::Rotate )
                , ( bp::arg("angle") ) );

        }
        { //::sf::View::SetCenter

            typedef void ( ::sf::View::*SetCenter_function_type )( float,float ) ;

            View_exposer.def(
                "SetCenter"
                , SetCenter_function_type( &::sf::View::SetCenter )
                , ( bp::arg("x"), bp::arg("y") ) );

        }
        { //::sf::View::SetCenter

            typedef void ( ::sf::View::*SetCenter_function_type )( ::sf::Vector2f const & ) ;

            View_exposer.def(
                "SetCenter"
                , SetCenter_function_type( &::sf::View::SetCenter )
                , ( bp::arg("center") ) );

        }
        { //::sf::View::SetRotation

            typedef void ( ::sf::View::*SetRotation_function_type )( float ) ;

            View_exposer.def(
                "SetRotation"
                , SetRotation_function_type( &::sf::View::SetRotation )
                , ( bp::arg("angle") ) );

        }
        { //::sf::View::SetSize

            typedef void ( ::sf::View::*SetSize_function_type )( float,float ) ;

            View_exposer.def(
                "SetSize"
                , SetSize_function_type( &::sf::View::SetSize )
                , ( bp::arg("width"), bp::arg("height") ) );

        }
        { //::sf::View::SetSize

            typedef void ( ::sf::View::*SetSize_function_type )( ::sf::Vector2f const & ) ;

            View_exposer.def(
                "SetSize"
                , SetSize_function_type( &::sf::View::SetSize )
                , ( bp::arg("size") ) );

        }
        { //::sf::View::SetViewport

            typedef void ( ::sf::View::*SetViewport_function_type )( ::sf::FloatRect const & ) ;

            View_exposer.def(
                "SetViewport"
                , SetViewport_function_type( &::sf::View::SetViewport )
                , ( bp::arg("viewport") ) );

        }
        { //::sf::View::Zoom

            typedef void ( ::sf::View::*Zoom_function_type )( float ) ;

            View_exposer.def(
                "Zoom"
                , Zoom_function_type( &::sf::View::Zoom )
                , ( bp::arg("factor") ) );

        }
    }

}
#endif
