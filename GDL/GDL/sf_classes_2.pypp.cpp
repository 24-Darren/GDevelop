// This file has been generated by Py++.
#ifdef PYSUPPORT
#include "boost/python.hpp"
#include "c:/libs/sfml/include/sfml/system.hpp"
#include "c:/libs/sfml/include/sfml/window.hpp"
#include "c:/libs/sfml/include/sfml/window/contextsettings.hpp"
#include "c:/libs/sfml/include/sfml/graphics.hpp"
#include "c:/libs/sfml/include/sfml/audio.hpp"
#include "sf_classes_2.pypp.hpp"

namespace bp = boost::python;

void register_classes_2(){

    bp::class_< sf::Drawable, boost::noncopyable >( "Drawable", bp::no_init )
        /*.def( bp::init< bp::optional< sf::Vector2f const &, sf::Vector2f const &, float, sf::Color const & > >(( bp::arg("position")=sf::Vector2<float>(0.0f, 0.0f), bp::arg("scale")=sf::Vector2<float>(1.0e+0f, 1.0e+0f), bp::arg("rotation")=0.0f, bp::arg("color")=sf::Color(255, 255, 255, 255) )) )*/
        .def(
            "GetBlendMode"
            , (::sf::Blend::Mode ( ::sf::Drawable::* )(  ) const)( &::sf::Drawable::GetBlendMode ) )
        .def(
            "GetColor"
            , (::sf::Color const & ( ::sf::Drawable::* )(  ) const)( &::sf::Drawable::GetColor )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetOrigin"
            , (::sf::Vector2f const & ( ::sf::Drawable::* )(  ) const)( &::sf::Drawable::GetOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetPosition"
            , (::sf::Vector2f const & ( ::sf::Drawable::* )(  ) const)( &::sf::Drawable::GetPosition )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetRotation"
            , (float ( ::sf::Drawable::* )(  ) const)( &::sf::Drawable::GetRotation ) )
        .def(
            "GetScale"
            , (::sf::Vector2f const & ( ::sf::Drawable::* )(  ) const)( &::sf::Drawable::GetScale )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "Move"
            , (void ( ::sf::Drawable::* )( float,float ) )( &::sf::Drawable::Move )
            , ( bp::arg("offsetX"), bp::arg("offsetY") ) )
        .def(
            "Move"
            , (void ( ::sf::Drawable::* )( ::sf::Vector2f const & ) )( &::sf::Drawable::Move )
            , ( bp::arg("offset") ) )
        .def(
            "Rotate"
            , (void ( ::sf::Drawable::* )( float ) )( &::sf::Drawable::Rotate )
            , ( bp::arg("Angle") ) )
        .def(
            "Scale"
            , (void ( ::sf::Drawable::* )( float,float ) )( &::sf::Drawable::Scale )
            , ( bp::arg("factorX"), bp::arg("factorY") ) )
        .def(
            "Scale"
            , (void ( ::sf::Drawable::* )( ::sf::Vector2f const & ) )( &::sf::Drawable::Scale )
            , ( bp::arg("factor") ) )
        .def(
            "SetBlendMode"
            , (void ( ::sf::Drawable::* )( ::sf::Blend::Mode ) )( &::sf::Drawable::SetBlendMode )
            , ( bp::arg("mode") ) )
        .def(
            "SetColor"
            , (void ( ::sf::Drawable::* )( ::sf::Color const & ) )( &::sf::Drawable::SetColor )
            , ( bp::arg("color") ) )
        .def(
            "SetOrigin"
            , (void ( ::sf::Drawable::* )( float,float ) )( &::sf::Drawable::SetOrigin )
            , ( bp::arg("x"), bp::arg("y") ) )
        .def(
            "SetOrigin"
            , (void ( ::sf::Drawable::* )( ::sf::Vector2f const & ) )( &::sf::Drawable::SetOrigin )
            , ( bp::arg("origin") ) )
        .def(
            "SetPosition"
            , (void ( ::sf::Drawable::* )( float,float ) )( &::sf::Drawable::SetPosition )
            , ( bp::arg("x"), bp::arg("y") ) )
        .def(
            "SetPosition"
            , (void ( ::sf::Drawable::* )( ::sf::Vector2f const & ) )( &::sf::Drawable::SetPosition )
            , ( bp::arg("position") ) )
        .def(
            "SetRotation"
            , (void ( ::sf::Drawable::* )( float ) )( &::sf::Drawable::SetRotation )
            , ( bp::arg("angle") ) )
        .def(
            "SetScale"
            , (void ( ::sf::Drawable::* )( float,float ) )( &::sf::Drawable::SetScale )
            , ( bp::arg("factorX"), bp::arg("factorY") ) )
        .def(
            "SetScale"
            , (void ( ::sf::Drawable::* )( ::sf::Vector2f const & ) )( &::sf::Drawable::SetScale )
            , ( bp::arg("scale") ) )
        .def(
            "SetScaleX"
            , (void ( ::sf::Drawable::* )( float ) )( &::sf::Drawable::SetScaleX )
            , ( bp::arg("factor") ) )
        .def(
            "SetScaleY"
            , (void ( ::sf::Drawable::* )( float ) )( &::sf::Drawable::SetScaleY )
            , ( bp::arg("factor") ) )
        .def(
            "SetX"
            , (void ( ::sf::Drawable::* )( float ) )( &::sf::Drawable::SetX )
            , ( bp::arg("x") ) )
        .def(
            "SetY"
            , (void ( ::sf::Drawable::* )( float ) )( &::sf::Drawable::SetY )
            , ( bp::arg("y") ) )
        .def(
            "TransformToGlobal"
            , (::sf::Vector2f ( ::sf::Drawable::* )( ::sf::Vector2f const & ) const)( &::sf::Drawable::TransformToGlobal )
            , ( bp::arg("point") ) )
        .def(
            "TransformToLocal"
            , (::sf::Vector2f ( ::sf::Drawable::* )( ::sf::Vector2f const & ) const)( &::sf::Drawable::TransformToLocal )
            , ( bp::arg("point") ) );

    { //::sf::Event
        typedef bp::class_< sf::Event > Event_exposer_t;
        Event_exposer_t Event_exposer = Event_exposer_t( "Event" );
        bp::scope Event_scope( Event_exposer );
        bp::enum_< sf::Event::EventType>("EventType")
            .value("Closed", sf::Event::Closed)
            .value("Resized", sf::Event::Resized)
            .value("LostFocus", sf::Event::LostFocus)
            .value("GainedFocus", sf::Event::GainedFocus)
            .value("TextEntered", sf::Event::TextEntered)
            .value("KeyPressed", sf::Event::KeyPressed)
            .value("KeyReleased", sf::Event::KeyReleased)
            .value("MouseWheelMoved", sf::Event::MouseWheelMoved)
            .value("MouseButtonPressed", sf::Event::MouseButtonPressed)
            .value("MouseButtonReleased", sf::Event::MouseButtonReleased)
            .value("MouseMoved", sf::Event::MouseMoved)
            .value("MouseEntered", sf::Event::MouseEntered)
            .value("MouseLeft", sf::Event::MouseLeft)
            .value("JoyButtonPressed", sf::Event::JoyButtonPressed)
            .value("JoyButtonReleased", sf::Event::JoyButtonReleased)
            .value("JoyMoved", sf::Event::JoyMoved)
            .export_values()
            ;
        Event_exposer.def_readwrite( "JoyButton", &sf::Event::JoyButton );
        Event_exposer.def_readwrite( "JoyMove", &sf::Event::JoyMove );
        Event_exposer.def_readwrite( "Key", &sf::Event::Key );
        Event_exposer.def_readwrite( "MouseButton", &sf::Event::MouseButton );
        Event_exposer.def_readwrite( "MouseMove", &sf::Event::MouseMove );
        Event_exposer.def_readwrite( "MouseWheel", &sf::Event::MouseWheel );
        Event_exposer.def_readwrite( "Size", &sf::Event::Size );
        Event_exposer.def_readwrite( "Text", &sf::Event::Text );
        bp::class_< sf::Event::JoyButtonEvent >( "JoyButtonEvent" )
            .def_readwrite( "Button", &sf::Event::JoyButtonEvent::Button )
            .def_readwrite( "JoystickId", &sf::Event::JoyButtonEvent::JoystickId );
        bp::class_< sf::Event::JoyMoveEvent >( "JoyMoveEvent" )
            .def_readwrite( "Axis", &sf::Event::JoyMoveEvent::Axis )
            .def_readwrite( "JoystickId", &sf::Event::JoyMoveEvent::JoystickId )
            .def_readwrite( "Position", &sf::Event::JoyMoveEvent::Position );
        bp::class_< sf::Event::KeyEvent >( "KeyEvent" )
            .def_readwrite( "Alt", &sf::Event::KeyEvent::Alt )
            .def_readwrite( "Code", &sf::Event::KeyEvent::Code )
            .def_readwrite( "Control", &sf::Event::KeyEvent::Control )
            .def_readwrite( "Shift", &sf::Event::KeyEvent::Shift );
        bp::class_< sf::Event::MouseButtonEvent >( "MouseButtonEvent" )
            .def_readwrite( "Button", &sf::Event::MouseButtonEvent::Button )
            .def_readwrite( "X", &sf::Event::MouseButtonEvent::X )
            .def_readwrite( "Y", &sf::Event::MouseButtonEvent::Y );
        bp::class_< sf::Event::MouseMoveEvent >( "MouseMoveEvent" )
            .def_readwrite( "X", &sf::Event::MouseMoveEvent::X )
            .def_readwrite( "Y", &sf::Event::MouseMoveEvent::Y );
        bp::class_< sf::Event::MouseWheelEvent >( "MouseWheelEvent" )
            .def_readwrite( "Delta", &sf::Event::MouseWheelEvent::Delta );
        bp::class_< sf::Event::SizeEvent >( "SizeEvent" )
            .def_readwrite( "Height", &sf::Event::SizeEvent::Height )
            .def_readwrite( "Width", &sf::Event::SizeEvent::Width );
        bp::class_< sf::Event::TextEvent >( "TextEvent" )
            .def_readwrite( "Unicode", &sf::Event::TextEvent::Unicode );
        Event_exposer.def_readwrite( "Type", &sf::Event::Type );
    }

    bp::class_< sf::Resource< sf::Font >, boost::noncopyable >( "Resource_less__sf_scope_Font__greater_", bp::no_init );
/*
    { //::sf::Unicode
        typedef bp::class_< sf::Unicode > Unicode_exposer_t;
        Unicode_exposer_t Unicode_exposer = Unicode_exposer_t( "Unicode" );
        bp::scope Unicode_scope( Unicode_exposer );
        { //::sf::Unicode::Text
            typedef bp::class_< sf::Unicode::Text > Text_exposer_t;
            Text_exposer_t Text_exposer = Text_exposer_t( "Text", bp::init< >() );
            bp::scope Text_scope( Text_exposer );
            Text_exposer.def( bp::init< char const * >(( bp::arg("str") )) );
            bp::implicitly_convertible< char const *, sf::Unicode::Text >();
            Text_exposer.def( bp::init< wchar_t const * >(( bp::arg("str") )) );
            bp::implicitly_convertible< wchar_t const *, sf::Unicode::Text >();
            Text_exposer.def( bp::init< sf::Uint8 const * >(( bp::arg("str") )) );
            bp::implicitly_convertible< sf::Uint8 const *, sf::Unicode::Text >();
            Text_exposer.def( bp::init< sf::Uint16 const * >(( bp::arg("str") )) );
            bp::implicitly_convertible< sf::Uint16 const *, sf::Unicode::Text >();
            Text_exposer.def( bp::init< sf::Uint32 const * >(( bp::arg("str") )) );
            bp::implicitly_convertible< sf::Uint32 const *, sf::Unicode::Text >();
            Text_exposer.def( bp::init< std::string const & >(( bp::arg("str") )) );
            bp::implicitly_convertible< std::string const &, sf::Unicode::Text >();
            Text_exposer.def( bp::init< std::wstring const & >(( bp::arg("str") )) );
            bp::implicitly_convertible< std::wstring const &, sf::Unicode::Text >();
            Text_exposer.def( bp::init< std::basic_string< unsigned char, std::char_traits< unsigned char >, std::allocator< unsigned char > > const & >(( bp::arg("str") )) );
            bp::implicitly_convertible< std::basic_string< unsigned char, std::char_traits< unsigned char >, std::allocator< unsigned char > > const &, sf::Unicode::Text >();
            Text_exposer.def( bp::init< std::basic_string< short unsigned int, std::char_traits< short unsigned int >, std::allocator< short unsigned int > > const & >(( bp::arg("str") )) );
            bp::implicitly_convertible< std::basic_string< short unsigned int, std::char_traits< short unsigned int >, std::allocator< short unsigned int > > const &, sf::Unicode::Text >();
            Text_exposer.def( bp::init< std::basic_string< unsigned int, std::char_traits< unsigned int >, std::allocator< unsigned int > > const & >(( bp::arg("str") )) );
            bp::implicitly_convertible< std::basic_string< unsigned int, std::char_traits< unsigned int >, std::allocator< unsigned int > > const &, sf::Unicode::Text >();
            Text_exposer.def( "as__scope_std_scope_basic_string_less_short_unsigned_int_comma_std_scope_char_traits_less_short_unsigned_int_greater__comma_std_scope_allocator_less_short_unsigned_int_greater___greater_", &sf::Unicode::Text::operator ::std::basic_string< short unsigned int, std::char_traits< short unsigned int >, std::allocator< short unsigned int > >  );
            Text_exposer.def( "as__scope_std_scope_basic_string_less_unsigned_char_comma_std_scope_char_traits_less_unsigned_char_greater__comma_std_scope_allocator_less_unsigned_char_greater___greater_", &sf::Unicode::Text::operator ::std::basic_string< unsigned char, std::char_traits< unsigned char >, std::allocator< unsigned char > >  );
            Text_exposer.def( "as__scope_std_scope_basic_string_less_unsigned_int_comma__std_scope_char_traits_less_unsigned_int_greater__comma__std_scope_allocator_less_unsigned_int_greater___greater__const__ref_", &sf::Unicode::Text::operator ::std::basic_string< unsigned int, std::char_traits< unsigned int >, std::allocator< unsigned int > > const & ,bp::return_value_policy< bp::copy_const_reference >() );
            Text_exposer.def( "__str__", &sf::Unicode::Text::operator ::std::string  );
            Text_exposer.def( "__str__", &sf::Unicode::Text::operator ::std::wstring  );
        }
    }*/
/*
    bp::class_< sf::Font, bp::bases< sf::Resource< sf::Font > > >( "Font", bp::init< >() )
        .def(
            "GetCharacterSize"
            , (unsigned int ( ::sf::Font::* )(  ) const)( &::sf::Font::GetCharacterSize ) )
        .def(
            "GetDefaultFont"
            , (::sf::Font const & (*)(  ))( &::sf::Font::GetDefaultFont )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetGlyph"
            , (::sf::Glyph const & ( ::sf::Font::* )( ::sf::Uint32 ) const)( &::sf::Font::GetGlyph )
            , ( bp::arg("codePoint") )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetImage"
            , (::sf::Image const & ( ::sf::Font::* )(  ) const)( &::sf::Font::GetImage )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "LoadFromFile"
            , (bool ( ::sf::Font::* )( ::std::string const &,unsigned int,::sf::Unicode::Text const & ) )( &::sf::Font::LoadFromFile )
            , ( bp::arg("filename"), bp::arg("charSize")=(unsigned int)(30), bp::arg("charset") ) )
        .def(
            "LoadFromMemory"
            , (bool ( ::sf::Font::* )( char const *,::size_t,unsigned int,::sf::Unicode::Text const & ) )( &::sf::Font::LoadFromMemory )
            , ( bp::arg("data"), bp::arg("sizeInBytes"), bp::arg("charSize")=(unsigned int)(30), bp::arg("charset") ) )
        .staticmethod( "GetDefaultFont" );
*/
    bp::class_< sf::Glyph >( "Glyph", bp::init< >() )
        .def_readwrite( "Advance", &sf::Glyph::Advance )
        .def_readwrite( "Rectangle", &sf::Glyph::Rectangle )
        .def_readwrite( "TexCoords", &sf::Glyph::TexCoords );

}
#endif
