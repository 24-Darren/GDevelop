#ifdef PYSUPPORT
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "c:/libs/sfml/include/sfml/system.hpp"
#include "c:/libs/sfml/include/sfml/window.hpp"
#include "c:/libs/sfml/include/sfml/window/contextsettings.hpp"
#include "c:/libs/sfml/include/sfml/graphics.hpp"
#include "c:/libs/sfml/include/sfml/audio.hpp"
#include "sf_classes_5.pypp.hpp"

namespace bp = boost::python;

struct RenderTarget_wrapper : sf::RenderTarget, bp::wrapper< sf::RenderTarget > {

    virtual void Draw( ::sf::Drawable const & object ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw( boost::ref(object) );
        else
            this->sf::RenderTarget::Draw( boost::ref(object) );
    }


    void default_Draw( ::sf::Drawable const & object ) {
        sf::RenderTarget::Draw( boost::ref(object) );
    }

    virtual unsigned int GetHeight(  ) const {
        bp::override func_GetHeight = this->get_override( "GetHeight" );
        return func_GetHeight(  );
    }

    virtual unsigned int GetWidth(  ) const {
        bp::override func_GetWidth = this->get_override( "GetWidth" );
        return func_GetWidth(  );
    }

};

struct RenderImage_wrapper : sf::RenderImage, bp::wrapper< sf::RenderImage > {

    RenderImage_wrapper( )
    : sf::RenderImage( )
      , bp::wrapper< sf::RenderImage >(){
        // null constructor

    }

    virtual unsigned int GetHeight(  ) const  {
        if( bp::override func_GetHeight = this->get_override( "GetHeight" ) )
            return func_GetHeight(  );
        else
            return this->sf::RenderImage::GetHeight(  );
    }


    unsigned int default_GetHeight(  ) const  {
        return sf::RenderImage::GetHeight( );
    }

    virtual unsigned int GetWidth(  ) const  {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth(  );
        else
            return this->sf::RenderImage::GetWidth(  );
    }


    unsigned int default_GetWidth(  ) const  {
        return sf::RenderImage::GetWidth( );
    }

    virtual void Draw( ::sf::Drawable const & object ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw( boost::ref(object) );
        else
            this->sf::RenderTarget::Draw( boost::ref(object) );
    }


    void default_Draw( ::sf::Drawable const & object ) {
        sf::RenderTarget::Draw( boost::ref(object) );
    }

};

void register_classes_5(){

    bp::class_< sf::Mutex, boost::noncopyable >( "Mutex", bp::init< >() )
        .def(
            "Lock"
            , (void ( ::sf::Mutex::* )(  ) )( &::sf::Mutex::Lock ) )
        .def(
            "Unlock"
            , (void ( ::sf::Mutex::* )(  ) )( &::sf::Mutex::Unlock ) );
/*
    { //::sf::PostFX
        typedef bp::class_< sf::PostFX, bp::bases< sf::Drawable > > PostFX_exposer_t;
        PostFX_exposer_t PostFX_exposer = PostFX_exposer_t( "PostFX", bp::init< >() );
        bp::scope PostFX_scope( PostFX_exposer );
        PostFX_exposer.def( bp::init< sf::PostFX const & >(( bp::arg("copy") )) );
        { //::sf::PostFX::CanUsePostFX

            typedef bool ( *CanUsePostFX_function_type )(  );

            PostFX_exposer.def(
                "CanUsePostFX"
                , CanUsePostFX_function_type( &::sf::PostFX::CanUsePostFX ) );

        }
        { //::sf::PostFX::LoadFromFile

            typedef bool ( ::sf::PostFX::*LoadFromFile_function_type )( ::std::string const & ) ;

            PostFX_exposer.def(
                "LoadFromFile"
                , LoadFromFile_function_type( &::sf::PostFX::LoadFromFile )
                , ( bp::arg("filename") ) );

        }
        { //::sf::PostFX::LoadFromMemory

            typedef bool ( ::sf::PostFX::*LoadFromMemory_function_type )( ::std::string const & ) ;

            PostFX_exposer.def(
                "LoadFromMemory"
                , LoadFromMemory_function_type( &::sf::PostFX::LoadFromMemory )
                , ( bp::arg("effect") ) );

        }
        { //::sf::PostFX::SetParameter

            typedef void ( ::sf::PostFX::*SetParameter_function_type )( ::std::string const &,float ) ;

            PostFX_exposer.def(
                "SetParameter"
                , SetParameter_function_type( &::sf::PostFX::SetParameter )
                , ( bp::arg("name"), bp::arg("x") ) );

        }
        { //::sf::PostFX::SetParameter

            typedef void ( ::sf::PostFX::*SetParameter_function_type )( ::std::string const &,float,float ) ;

            PostFX_exposer.def(
                "SetParameter"
                , SetParameter_function_type( &::sf::PostFX::SetParameter )
                , ( bp::arg("Name"), bp::arg("x"), bp::arg("y") ) );

        }
        { //::sf::PostFX::SetParameter

            typedef void ( ::sf::PostFX::*SetParameter_function_type )( ::std::string const &,float,float,float ) ;

            PostFX_exposer.def(
                "SetParameter"
                , SetParameter_function_type( &::sf::PostFX::SetParameter )
                , ( bp::arg("Name"), bp::arg("x"), bp::arg("y"), bp::arg("z") ) );

        }
        { //::sf::PostFX::SetParameter

            typedef void ( ::sf::PostFX::*SetParameter_function_type )( ::std::string const &,float,float,float,float ) ;

            PostFX_exposer.def(
                "SetParameter"
                , SetParameter_function_type( &::sf::PostFX::SetParameter )
                , ( bp::arg("Name"), bp::arg("x"), bp::arg("y"), bp::arg("Z"), bp::arg("w") ) );

        }
        { //::sf::PostFX::SetTexture

            typedef void ( ::sf::PostFX::*SetTexture_function_type )( ::std::string const &,::sf::Image const * ) ;

            PostFX_exposer.def(
                "SetTexture"
                , SetTexture_function_type( &::sf::PostFX::SetTexture )
                , ( bp::arg("name"), bp::arg("texture") ) );

        }
        { //::sf::PostFX::operator=

            typedef ::sf::PostFX & ( ::sf::PostFX::*assign_function_type )( ::sf::PostFX const & ) ;

            PostFX_exposer.def(
                "assign"
                , assign_function_type( &::sf::PostFX::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );

        }
        PostFX_exposer.staticmethod( "CanUsePostFX" );
    }*/

    bp::class_< sf::Randomizer >( "Randomizer" )
        .def(
            "GetSeed"
            , (unsigned int (*)(  ))( &::sf::Randomizer::GetSeed ) )
        .def(
            "Random"
            , (float (*)( float,float ))( &::sf::Randomizer::Random )
            , ( bp::arg("begin"), bp::arg("end") ) )
        .def(
            "Random"
            , (int (*)( int,int ))( &::sf::Randomizer::Random )
            , ( bp::arg("begin"), bp::arg("end") ) )
        .def(
            "SetSeed"
            , (void (*)( unsigned int ))( &::sf::Randomizer::SetSeed )
            , ( bp::arg("seed") ) )
        .staticmethod( "GetSeed" )
        .staticmethod( "Random" )
        .staticmethod( "SetSeed" );

    bp::class_< sf::Rect< float > >( "FloatRect", bp::init< >() )
        .def( bp::init< float, float, float, float >(( bp::arg("left"), bp::arg("top"), bp::arg("right"), bp::arg("bottom") )) )
        .def(
            "Contains"
            , (bool ( ::sf::Rect<float>::* )( float,float ) const)( &::sf::Rect< float >::Contains )
            , ( bp::arg("x"), bp::arg("y") ) )
        .def(
            "Contains"
            , (bool ( ::sf::Rect<float>::* )( ::sf::Vector2< float > const & ) const)( &::sf::Rect< float >::Contains )
            , ( bp::arg("point") ) )
        .def(
            "GetCenter"
            , (::sf::Vector2< float > ( ::sf::Rect<float>::* )(  ) const)( &::sf::Rect< float >::GetCenter ) )
        .def(
            "GetSize"
            , (::sf::Vector2< float > ( ::sf::Rect<float>::* )(  ) const)( &::sf::Rect< float >::GetSize ) )
        .def(
            "Intersects"
            , (bool ( ::sf::Rect<float>::* )( ::sf::Rect< float > const & ) const)( &::sf::Rect< float >::Intersects )
            , ( bp::arg("rectangle") ) )
        .def(
            "Intersects"
            , (bool ( ::sf::Rect<float>::* )( ::sf::Rect< float > const &,::sf::Rect< float > & ) const)( &::sf::Rect< float >::Intersects )
            , ( bp::arg("rectangle"), bp::arg("intersection") ) )
        .def(
            "Offset"
            , (void ( ::sf::Rect<float>::* )( float,float ) )( &::sf::Rect< float >::Offset )
            , ( bp::arg("offsetX"), bp::arg("offsetY") ) )
        .def(
            "Offset"
            , (void ( ::sf::Rect<float>::* )( ::sf::Vector2< float > const & ) )( &::sf::Rect< float >::Offset )
            , ( bp::arg("offset") ) )
        .def_readwrite( "Bottom", &sf::Rect< float >::Bottom )
        .def_readwrite( "Left", &sf::Rect< float >::Left )
        .def_readwrite( "Right", &sf::Rect< float >::Right )
        .def_readwrite( "Top", &sf::Rect< float >::Top );

    bp::class_< RenderTarget_wrapper, boost::noncopyable >( "RenderTarget", bp::no_init )
        .def(
            "Clear"
            , (void ( ::sf::RenderTarget::* )( ::sf::Color const & ) )( &::sf::RenderTarget::Clear )
            , ( bp::arg("color")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "Draw"
            , (void ( ::sf::RenderTarget::* )( ::sf::Drawable const & ) )(&::sf::RenderTarget::Draw)
            , (void ( RenderTarget_wrapper::* )( ::sf::Drawable const & ) )(&RenderTarget_wrapper::default_Draw)
            , ( bp::arg("object") ) )
        /*.def(
            "GetDefaultView"
            , (::sf::View & ( ::sf::RenderTarget::* )(  ) )( &::sf::RenderTarget::GetDefaultView )
                /* undefined call policies  )*/
        .def(
            "GetHeight"
            , bp::pure_virtual( (unsigned int ( ::sf::RenderTarget::* )(  ) const)(&::sf::RenderTarget::GetHeight) ) )
        .def(
            "GetView"
            , (::sf::View const & ( ::sf::RenderTarget::* )(  ) const)( &::sf::RenderTarget::GetView )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetWidth"
            , bp::pure_virtual( (unsigned int ( ::sf::RenderTarget::* )(  ) const)(&::sf::RenderTarget::GetWidth) ) )
      /*  .def(
            "PreserveOpenGLStates"
            , (void ( ::sf::RenderTarget::* )( bool ) )( &::sf::RenderTarget::PreserveOpenGLStates )
            , ( bp::arg("preserve") ) )*/
        .def(
            "SetView"
            , (void ( ::sf::RenderTarget::* )( ::sf::View const & ) )( &::sf::RenderTarget::SetView )
            , ( bp::arg("view") ) );
/*
    bp::class_< RenderImage_wrapper, bp::bases< sf::RenderTarget >, boost::noncopyable >( "RenderImage", bp::init< >() )
        .def(
            "CanUseRenderImage"
            , (bool (*)(  ))( &::sf::RenderImage::CanUseRenderImage ) )
        .def(
            "Create"
            , (bool ( ::sf::RenderImage::* )( unsigned int,unsigned int,bool ) )( &::sf::RenderImage::Create )
            , ( bp::arg("width"), bp::arg("height"), bp::arg("depthBuffer")=(bool)(false) ) )
        .def(
            "GetHeight"
            , (unsigned int ( ::sf::RenderImage::* )(  ) const)(&::sf::RenderImage::GetHeight)
            , (unsigned int ( RenderImage_wrapper::* )(  ) const)(&RenderImage_wrapper::default_GetHeight) )
        .def(
            "GetImage"
            , (::sf::Image const & ( ::sf::RenderImage::* )(  ) const)( &::sf::RenderImage::GetImage )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetWidth"
            , (unsigned int ( ::sf::RenderImage::* )(  ) const)(&::sf::RenderImage::GetWidth)
            , (unsigned int ( RenderImage_wrapper::* )(  ) const)(&RenderImage_wrapper::default_GetWidth) )
        .def(
            "SetActive"
            , (bool ( ::sf::RenderImage::* )( bool ) )( &::sf::RenderImage::SetActive )
            , ( bp::arg("active")=(bool)(true) ) )
        .def(
            "Draw"
            , (void ( ::sf::RenderTarget::* )( ::sf::Drawable const & ) )(&::sf::RenderTarget::Draw)
            , (void ( RenderImage_wrapper::* )( ::sf::Drawable const & ) )(&RenderImage_wrapper::default_Draw)
            , ( bp::arg("object") ) )
        .staticmethod( "CanUseRenderImage" );
*/
}
#endif
