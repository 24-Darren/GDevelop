#ifdef PYSUPPORT
// This file has been generated by Py++.
/*
#include "boost/python.hpp"
#include "c:/libs/sfml/include/sfml/system.hpp"
#include "c:/libs/sfml/include/sfml/window.hpp"
#include "c:/libs/sfml/include/sfml/window/contextsettings.hpp"
#include "c:/libs/sfml/include/sfml/graphics.hpp"
#include "c:/libs/sfml/include/sfml/audio.hpp"
#include "sf_classes_6.pypp.hpp"

namespace bp = boost::python;

struct RenderWindow_wrapper : sf::RenderWindow, bp::wrapper< sf::RenderWindow > {

    RenderWindow_wrapper( )
    : sf::RenderWindow( )
      , bp::wrapper< sf::RenderWindow >(){
        // null constructor

    }

    RenderWindow_wrapper(::sf::VideoMode mode, ::std::string const & title, long unsigned int style=6, ::sf::ContextSettings const & settings=sf::ContextSettings(24u, 8u, 0u) )
    : sf::RenderWindow( mode, title, style, boost::ref(settings) )
      , bp::wrapper< sf::RenderWindow >(){
        // constructor

    }

    RenderWindow_wrapper(::sf::WindowHandle handle, ::sf::ContextSettings const & settings=sf::ContextSettings(24u, 8u, 0u) )
    : sf::RenderWindow( handle, boost::ref(settings) )
      , bp::wrapper< sf::RenderWindow >(){
        // constructor

    }

    virtual unsigned int GetHeight(  ) const  {
        if( bp::override func_GetHeight = this->get_override( "GetHeight" ) )
            return func_GetHeight(  );
        else
            return this->sf::RenderWindow::GetHeight(  );
    }


    unsigned int default_GetHeight(  ) const  {
        return sf::RenderWindow::GetHeight( );
    }

    virtual unsigned int GetWidth(  ) const  {
        if( bp::override func_GetWidth = this->get_override( "GetWidth" ) )
            return func_GetWidth(  );
        else
            return this->sf::RenderWindow::GetWidth(  );
    }


    unsigned int default_GetWidth(  ) const  {
        return sf::RenderWindow::GetWidth( );
    }

    virtual void Draw( ::sf::Drawable const & object ) {
        if( bp::override func_Draw = this->get_override( "Draw" ) )
            func_Draw( boost::ref(object) );
        else
            this->sf::RenderTarget::Draw( boost::ref(object) );
    }


    void default_Draw( ::sf::Drawable const & object ) {
        sf::RenderTarget::Draw( boost::ref(object) );
    }

};

void register_classes_6(){

    bp::class_< sf::Window, bp::bases< sf::WindowListener >, boost::noncopyable >( "Window", bp::init< >() )
        .def( bp::init< sf::VideoMode, std::string const &, bp::optional< long unsigned int, sf::ContextSettings const & > >(( bp::arg("mode"), bp::arg("title"), bp::arg("style")=(long unsigned int)(6), bp::arg("settings")=sf::ContextSettings(24u, 8u, 0u) )) )
        .def( bp::init< sf::WindowHandle, bp::optional< sf::ContextSettings const & > >(( bp::arg("handle"), bp::arg("settings")=sf::ContextSettings(24u, 8u, 0u) )) )
        .def(
            "Close"
            , (void ( ::sf::Window::* )(  ) )( &::sf::Window::Close ) )
        .def(
            "Create"
            , (void ( ::sf::Window::* )( ::sf::VideoMode,::std::string const &,long unsigned int,::sf::ContextSettings const & ) )( &::sf::Window::Create )
            , ( bp::arg("mode"), bp::arg("title"), bp::arg("style")=(long unsigned int)(6), bp::arg("settings")=sf::ContextSettings(24u, 8u, 0u) ) )
        .def(
            "Create"
            , (void ( ::sf::Window::* )( ::sf::WindowHandle,::sf::ContextSettings const & ) )( &::sf::Window::Create )
            , ( bp::arg("handle"), bp::arg("settings")=sf::ContextSettings(24u, 8u, 0u) ) )
        .def(
            "Display"
            , (void ( ::sf::Window::* )(  ) )( &::sf::Window::Display ) )
        .def(
            "EnableKeyRepeat"
            , (void ( ::sf::Window::* )( bool ) )( &::sf::Window::EnableKeyRepeat )
            , ( bp::arg("Enabled") ) )
        .def(
            "GetEvent"
            , (bool ( ::sf::Window::* )( ::sf::Event & ) )( &::sf::Window::GetEvent )
            , ( bp::arg("event") ) )
        .def(
            "GetFrameTime"
            , (float ( ::sf::Window::* )(  ) const)( &::sf::Window::GetFrameTime ) )
        .def(
            "GetHeight"
            , (unsigned int ( ::sf::Window::* )(  ) const)( &::sf::Window::GetHeight ) )
        .def(
            "GetInput"
            , (::sf::Input const & ( ::sf::Window::* )(  ) const)( &::sf::Window::GetInput )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetSettings"
            , (::sf::ContextSettings const & ( ::sf::Window::* )(  ) const)( &::sf::Window::GetSettings )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetWidth"
            , (unsigned int ( ::sf::Window::* )(  ) const)( &::sf::Window::GetWidth ) )
        .def(
            "IsOpened"
            , (bool ( ::sf::Window::* )(  ) const)( &::sf::Window::IsOpened ) )
        .def(
            "SetActive"
            , (bool ( ::sf::Window::* )( bool ) const)( &::sf::Window::SetActive )
            , ( bp::arg("active")=(bool)(true) ) )
        .def(
            "SetCursorPosition"
            , (void ( ::sf::Window::* )( unsigned int,unsigned int ) )( &::sf::Window::SetCursorPosition )
            , ( bp::arg("left"), bp::arg("top") ) )
        .def(
            "SetFramerateLimit"
            , (void ( ::sf::Window::* )( unsigned int ) )( &::sf::Window::SetFramerateLimit )
            , ( bp::arg("limit") ) )
        .def(
            "SetIcon"
            , (void ( ::sf::Window::* )( unsigned int,unsigned int,::sf::Uint8 const * ) )( &::sf::Window::SetIcon )
            , ( bp::arg("width"), bp::arg("height"), bp::arg("pixels") ) )
        .def(
            "SetJoystickThreshold"
            , (void ( ::sf::Window::* )( float ) )( &::sf::Window::SetJoystickThreshold )
            , ( bp::arg("threshold") ) )
        .def(
            "SetPosition"
            , (void ( ::sf::Window::* )( int,int ) )( &::sf::Window::SetPosition )
            , ( bp::arg("left"), bp::arg("top") ) )
        .def(
            "SetSize"
            , (void ( ::sf::Window::* )( unsigned int,unsigned int ) )( &::sf::Window::SetSize )
            , ( bp::arg("width"), bp::arg("height") ) )
        .def(
            "Show"
            , (void ( ::sf::Window::* )( bool ) )( &::sf::Window::Show )
            , ( bp::arg("show") ) )
        .def(
            "ShowMouseCursor"
            , (void ( ::sf::Window::* )( bool ) )( &::sf::Window::ShowMouseCursor )
            , ( bp::arg("show") ) )
        .def(
            "UseVerticalSync"
            , (void ( ::sf::Window::* )( bool ) )( &::sf::Window::UseVerticalSync )
            , ( bp::arg("enabled") ) );

    bp::class_< RenderWindow_wrapper, bp::bases< sf::Window, sf::RenderTarget >, boost::noncopyable >( "RenderWindow", bp::init< >() )
        .def( bp::init< sf::VideoMode, std::string const &, bp::optional< long unsigned int, sf::ContextSettings const & > >(( bp::arg("mode"), bp::arg("title"), bp::arg("style")=(long unsigned int)(6), bp::arg("settings")=sf::ContextSettings(24u, 8u, 0u) )) )
        .def( bp::init< sf::WindowHandle, bp::optional< sf::ContextSettings const & > >(( bp::arg("handle"), bp::arg("settings")=sf::ContextSettings(24u, 8u, 0u) )) )
/*        .def(
            "Capture"
            , (::sf::Image ( ::sf::RenderWindow::* )(  ) const)( &::sf::RenderWindow::Capture ) )
        .def(
            "ConvertCoords"
            , (::sf::Vector2f ( ::sf::RenderWindow::* )( unsigned int,unsigned int ) const)( &::sf::RenderWindow::ConvertCoords )
            , ( bp::arg("x"), bp::arg("y") ) )
        .def(
            "ConvertCoords"
            , (::sf::Vector2f ( ::sf::RenderWindow::* )( unsigned int,unsigned int,::sf::View const & ) const)( &::sf::RenderWindow::ConvertCoords )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("view") ) )
        .def(
            "GetHeight"
            , (unsigned int ( ::sf::RenderWindow::* )(  ) const)(&::sf::RenderWindow::GetHeight)
            , (unsigned int ( RenderWindow_wrapper::* )(  ) const)(&RenderWindow_wrapper::default_GetHeight) )
        .def(
            "GetWidth"
            , (unsigned int ( ::sf::RenderWindow::* )(  ) const)(&::sf::RenderWindow::GetWidth)
            , (unsigned int ( RenderWindow_wrapper::* )(  ) const)(&RenderWindow_wrapper::default_GetWidth) )
        .def(
            "Draw"
            , (void ( ::sf::RenderTarget::* )( ::sf::Drawable const & ) )(&::sf::RenderTarget::Draw)
            , (void ( RenderWindow_wrapper::* )( ::sf::Drawable const & ) )(&RenderWindow_wrapper::default_Draw)
            , ( bp::arg("object") ) );

    bp::class_< sf::Resource< sf::SoundBuffer >, boost::noncopyable >( "Resource_less__sf_scope_SoundBuffer__greater_", bp::no_init );

    bp::class_< sf::Shape, bp::bases< sf::Drawable > >( "Shape", bp::init< >() )
        .def(
            "AddPoint"
            , (void ( ::sf::Shape::* )( float,float,::sf::Color const &,::sf::Color const & ) )( &::sf::Shape::AddPoint )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("color")=sf::Color(255, 255, 255, 255), bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "AddPoint"
            , (void ( ::sf::Shape::* )( ::sf::Vector2f const &,::sf::Color const &,::sf::Color const & ) )( &::sf::Shape::AddPoint )
            , ( bp::arg("position"), bp::arg("color")=sf::Color(255, 255, 255, 255), bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "Circle"
            , (::sf::Shape (*)( float,float,float,::sf::Color const &,float,::sf::Color const & ))( &::sf::Shape::Circle )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("radius"), bp::arg("color"), bp::arg("outline")=0.0f, bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "Circle"
            , (::sf::Shape (*)( ::sf::Vector2f const &,float,::sf::Color const &,float,::sf::Color const & ))( &::sf::Shape::Circle )
            , ( bp::arg("center"), bp::arg("radius"), bp::arg("color"), bp::arg("outline")=0.0f, bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "EnableFill"
            , (void ( ::sf::Shape::* )( bool ) )( &::sf::Shape::EnableFill )
            , ( bp::arg("enable") ) )
        .def(
            "EnableOutline"
            , (void ( ::sf::Shape::* )( bool ) )( &::sf::Shape::EnableOutline )
            , ( bp::arg("enable") ) )
        .def(
            "GetNbPoints"
            , (unsigned int ( ::sf::Shape::* )(  ) const)( &::sf::Shape::GetNbPoints ) )
        .def(
            "GetOutlineWidth"
            , (float ( ::sf::Shape::* )(  ) const)( &::sf::Shape::GetOutlineWidth ) )
        .def(
            "GetPointColor"
            , (::sf::Color const & ( ::sf::Shape::* )( unsigned int ) const)( &::sf::Shape::GetPointColor )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetPointOutlineColor"
            , (::sf::Color const & ( ::sf::Shape::* )( unsigned int ) const)( &::sf::Shape::GetPointOutlineColor )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "GetPointPosition"
            , (::sf::Vector2f const & ( ::sf::Shape::* )( unsigned int ) const)( &::sf::Shape::GetPointPosition )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::copy_const_reference >() )
        .def(
            "Line"
            , (::sf::Shape (*)( float,float,float,float,float,::sf::Color const &,float,::sf::Color const & ))( &::sf::Shape::Line )
            , ( bp::arg("p1x"), bp::arg("p1y"), bp::arg("p2x"), bp::arg("p2y"), bp::arg("thickness"), bp::arg("color"), bp::arg("outline")=0.0f, bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "Line"
            , (::sf::Shape (*)( ::sf::Vector2f const &,::sf::Vector2f const &,float,::sf::Color const &,float,::sf::Color const & ))( &::sf::Shape::Line )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("thickness"), bp::arg("color"), bp::arg("outline")=0.0f, bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "Rectangle"
            , (::sf::Shape (*)( float,float,float,float,::sf::Color const &,float,::sf::Color const & ))( &::sf::Shape::Rectangle )
            , ( bp::arg("p1x"), bp::arg("p1y"), bp::arg("p2x"), bp::arg("p2y"), bp::arg("color"), bp::arg("outline")=0.0f, bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "Rectangle"
            , (::sf::Shape (*)( ::sf::Vector2f const &,::sf::Vector2f const &,::sf::Color const &,float,::sf::Color const & ))( &::sf::Shape::Rectangle )
            , ( bp::arg("p1"), bp::arg("p2"), bp::arg("color"), bp::arg("outline")=0.0f, bp::arg("outlineColor")=sf::Color(0, 0, 0, 255) ) )
        .def(
            "SetOutlineWidth"
            , (void ( ::sf::Shape::* )( float ) )( &::sf::Shape::SetOutlineWidth )
            , ( bp::arg("width") ) )
        .def(
            "SetPointColor"
            , (void ( ::sf::Shape::* )( unsigned int,::sf::Color const & ) )( &::sf::Shape::SetPointColor )
            , ( bp::arg("index"), bp::arg("color") ) )
        .def(
            "SetPointOutlineColor"
            , (void ( ::sf::Shape::* )( unsigned int,::sf::Color const & ) )( &::sf::Shape::SetPointOutlineColor )
            , ( bp::arg("index"), bp::arg("outlineColor") ) )
        .def(
            "SetPointPosition"
            , (void ( ::sf::Shape::* )( unsigned int,::sf::Vector2f const & ) )( &::sf::Shape::SetPointPosition )
            , ( bp::arg("index"), bp::arg("position") ) )
        .def(
            "SetPointPosition"
            , (void ( ::sf::Shape::* )( unsigned int,float,float ) )( &::sf::Shape::SetPointPosition )
            , ( bp::arg("index"), bp::arg("x"), bp::arg("y") ) )
        .staticmethod( "Circle" )
        .staticmethod( "Line" )
        .staticmethod( "Rectangle" );

    { //::sf::SoundBuffer
        typedef bp::class_< sf::SoundBuffer, bp::bases< sf::Resource< sf::SoundBuffer > > > SoundBuffer_exposer_t;
        SoundBuffer_exposer_t SoundBuffer_exposer = SoundBuffer_exposer_t( "SoundBuffer", bp::init< >() );
        bp::scope SoundBuffer_scope( SoundBuffer_exposer );
        SoundBuffer_exposer.def( bp::init< sf::SoundBuffer const & >(( bp::arg("copy") )) );
        { //::sf::SoundBuffer::GetChannelsCount

            typedef unsigned int ( ::sf::SoundBuffer::*GetChannelsCount_function_type )(  ) const;

            SoundBuffer_exposer.def(
                "GetChannelsCount"
                , GetChannelsCount_function_type( &::sf::SoundBuffer::GetChannelsCount ) );

        }
        { //::sf::SoundBuffer::GetDuration

            typedef float ( ::sf::SoundBuffer::*GetDuration_function_type )(  ) const;

            SoundBuffer_exposer.def(
                "GetDuration"
                , GetDuration_function_type( &::sf::SoundBuffer::GetDuration ) );

        }
        { //::sf::SoundBuffer::GetSampleRate

            typedef unsigned int ( ::sf::SoundBuffer::*GetSampleRate_function_type )(  ) const;

            SoundBuffer_exposer.def(
                "GetSampleRate"
                , GetSampleRate_function_type( &::sf::SoundBuffer::GetSampleRate ) );

        }
        /*{ //::sf::SoundBuffer::GetSamples

            typedef ::sf::Int16 const * ( ::sf::SoundBuffer::*GetSamples_function_type )(  ) const;

            SoundBuffer_exposer.def(
                "GetSamples"
                , GetSamples_function_type( &::sf::SoundBuffer::GetSamples )
                , bp::return_internal_reference< >() );

        }
        { //::sf::SoundBuffer::GetSamplesCount

            typedef ::size_t ( ::sf::SoundBuffer::*GetSamplesCount_function_type )(  ) const;

            SoundBuffer_exposer.def(
                "GetSamplesCount"
                , GetSamplesCount_function_type( &::sf::SoundBuffer::GetSamplesCount ) );

        }
        { //::sf::SoundBuffer::LoadFromFile

            typedef bool ( ::sf::SoundBuffer::*LoadFromFile_function_type )( ::std::string const & ) ;

            SoundBuffer_exposer.def(
                "LoadFromFile"
                , LoadFromFile_function_type( &::sf::SoundBuffer::LoadFromFile )
                , ( bp::arg("filename") ) );

        }
        { //::sf::SoundBuffer::LoadFromMemory

            typedef bool ( ::sf::SoundBuffer::*LoadFromMemory_function_type )( char const *,::size_t ) ;

            SoundBuffer_exposer.def(
                "LoadFromMemory"
                , LoadFromMemory_function_type( &::sf::SoundBuffer::LoadFromMemory )
                , ( bp::arg("data"), bp::arg("sizeInBytes") ) );

        }
        { //::sf::SoundBuffer::LoadFromSamples

            typedef bool ( ::sf::SoundBuffer::*LoadFromSamples_function_type )( ::sf::Int16 const *,::size_t,unsigned int,unsigned int ) ;

            SoundBuffer_exposer.def(
                "LoadFromSamples"
                , LoadFromSamples_function_type( &::sf::SoundBuffer::LoadFromSamples )
                , ( bp::arg("samples"), bp::arg("samplesCount"), bp::arg("channelsCount"), bp::arg("sampleRate") ) );

        }
        { //::sf::SoundBuffer::SaveToFile

            typedef bool ( ::sf::SoundBuffer::*SaveToFile_function_type )( ::std::string const & ) const;

            SoundBuffer_exposer.def(
                "SaveToFile"
                , SaveToFile_function_type( &::sf::SoundBuffer::SaveToFile )
                , ( bp::arg("filename") ) );

        }
        { //::sf::SoundBuffer::operator=

            typedef ::sf::SoundBuffer & ( ::sf::SoundBuffer::*assign_function_type )( ::sf::SoundBuffer const & ) ;

            SoundBuffer_exposer.def(
                "assign"
                , assign_function_type( &::sf::SoundBuffer::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );

        }
    }

    bp::class_< sf::SoundRecorder, boost::noncopyable >( "SoundRecorder", bp::no_init )
        .def(
            "CanCapture"
            , (bool (*)(  ))( &::sf::SoundRecorder::CanCapture ) )
        .def(
            "GetSampleRate"
            , (unsigned int ( ::sf::SoundRecorder::* )(  ) const)( &::sf::SoundRecorder::GetSampleRate ) )
        .def(
            "Start"
            , (void ( ::sf::SoundRecorder::* )( unsigned int ) )( &::sf::SoundRecorder::Start )
            , ( bp::arg("sampleRate")=(unsigned int)(44100) ) )
        .def(
            "Stop"
            , (void ( ::sf::SoundRecorder::* )(  ) )( &::sf::SoundRecorder::Stop ) )
        .staticmethod( "CanCapture" );

}*/
#endif
